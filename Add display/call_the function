import java.util.*;
public class Main
{
                         // node declaration
    
    private static class Node{
        int data;
        ArrayList<Node> children = new ArrayList<>(); 
    }
    
    
                        //   display the tree
    
    public static void display(Node node){
        String str = node.data + "-->";
        for(Node child:node.children){
            str = str + child.data + ",";
        }
        str = str + ".";
        System.out.println(str);
        for(Node child:node.children){
            display(child);
        }
    }
      
                         //  size of generic tree
      
    public static int size(Node node){
        int s=1;
        for(Node child:node.children){
            int cs = size(child);
            s=s + cs;
        }
        //s = s + 1;
        return s;
    }
      
                      //    maximun value of node
    
    public static int max(Node node){
        int max = Integer.MIN_VALUE;
        
        for(Node child:node.children){
            int cm = max(child);
            max = Math.max(cm,max);
        }
        max = Math.max(node.data,max);
        return max;
    } 
    
                                   //   height of the generic tree
    
    public static int height(Node node){
        int ht=1;
        for(Node child:node.children){
            int ch = height(child);
            ht = Math.max(ch,ht);
        }
        return ht;
    }
    
                          //             remove the leaves
    
    public static void remove_leaves(Node node){
        for(int i = node.children.size() - 1;i>=0;i--){
            Node child = node.children.get(i);
            if(child.children.size() == 0){
                node.children.remove(child);
            }
        }
        for(Node child:node.children){
            remove_leaves(child);
        }
    }
    
                         //   find the element
    
    public static boolean find_element(Node node,int data){
        if(node.data == data){
            return true;
        }
        for(Node child:node.children){
            boolean fic = find_element(child,data);
            if(fic){
                return true;
            }
        }
        return false;
    }
    
                                  //        node to root path
    
    public static ArrayList<Integer> nodetorootpath(Node node , int data){
        if(node.data == data){
            ArrayList<Integer> list = new ArrayList<>();
            list.add(node.data);
            return list;
        }
        for(Node child : node.children){
            ArrayList<Integer> ptc = nodetorootpath(child,data);
            if(ptc.size()>0){
                ptc.add(node.data);
                return ptc;
            }
        }
        return new ArrayList<>();
    }
    
                                //   main function
    
	public static void main(String[] args) {
	    Node root = null;
	    int[] arr = {10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
	    
	    Stack<Node> st = new Stack<>();
	    for(int i=0;i<arr.length;i++){
	        if(arr[i] == -1){
	            st.pop();
	        } else{
	            Node t = new Node();
	            t.data= arr[i];
	            
	            if(st.size()>0){
	                st.peek().children.add(t);
	                //st.push(t);
	            } else{
	                root = t;
	            }
	            st.push(t);
	        }
	    }
	}
}
